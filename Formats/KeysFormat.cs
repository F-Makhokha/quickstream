// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: KeysFormat.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from KeysFormat.proto</summary>
public static partial class KeysFormatReflection {

  #region Descriptor
  /// <summary>File descriptor for KeysFormat.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static KeysFormatReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBLZXlzRm9ybWF0LnByb3RvIiEKC1BCUHVibGljS2V5EhIKCnB1YmxpY19r",
          "ZXkYASABKAwiQgoJUEJLZXlQYWlyEhMKC3ByaXZhdGVfa2V5GAEgASgMEiAK",
          "CnB1YmxpY19rZXkYAiABKAsyDC5QQlB1YmxpY0tleSJECg1QQkNlcnRpZmlj",
          "YXRlEhEKCXNpZ25hdHVyZRgBIAEoDBISCgpwdWJsaWNfa2V5GAIgASgMEgwK",
          "BG5hbWUYAyABKAliBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PBPublicKey), global::PBPublicKey.Parser, new[]{ "PublicKey" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBKeyPair), global::PBKeyPair.Parser, new[]{ "PrivateKey", "PublicKey" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBCertificate), global::PBCertificate.Parser, new[]{ "Signature", "PublicKey", "Name" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class PBPublicKey : pb::IMessage<PBPublicKey> {
  private static readonly pb::MessageParser<PBPublicKey> _parser = new pb::MessageParser<PBPublicKey>(() => new PBPublicKey());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBPublicKey> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::KeysFormatReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPublicKey() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPublicKey(PBPublicKey other) : this() {
    publicKey_ = other.publicKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPublicKey Clone() {
    return new PBPublicKey(this);
  }

  /// <summary>Field number for the "public_key" field.</summary>
  public const int PublicKeyFieldNumber = 1;
  private pb::ByteString publicKey_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString PublicKey {
    get { return publicKey_; }
    set {
      publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBPublicKey);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBPublicKey other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PublicKey != other.PublicKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PublicKey.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(PublicKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PublicKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBPublicKey other) {
    if (other == null) {
      return;
    }
    if (other.PublicKey.Length != 0) {
      PublicKey = other.PublicKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublicKey = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class PBKeyPair : pb::IMessage<PBKeyPair> {
  private static readonly pb::MessageParser<PBKeyPair> _parser = new pb::MessageParser<PBKeyPair>(() => new PBKeyPair());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBKeyPair> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::KeysFormatReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBKeyPair() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBKeyPair(PBKeyPair other) : this() {
    privateKey_ = other.privateKey_;
    PublicKey = other.publicKey_ != null ? other.PublicKey.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBKeyPair Clone() {
    return new PBKeyPair(this);
  }

  /// <summary>Field number for the "private_key" field.</summary>
  public const int PrivateKeyFieldNumber = 1;
  private pb::ByteString privateKey_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString PrivateKey {
    get { return privateKey_; }
    set {
      privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "public_key" field.</summary>
  public const int PublicKeyFieldNumber = 2;
  private global::PBPublicKey publicKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBPublicKey PublicKey {
    get { return publicKey_; }
    set {
      publicKey_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBKeyPair);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBKeyPair other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PrivateKey != other.PrivateKey) return false;
    if (!object.Equals(PublicKey, other.PublicKey)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
    if (publicKey_ != null) hash ^= PublicKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PrivateKey.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(PrivateKey);
    }
    if (publicKey_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PublicKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PrivateKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
    }
    if (publicKey_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBKeyPair other) {
    if (other == null) {
      return;
    }
    if (other.PrivateKey.Length != 0) {
      PrivateKey = other.PrivateKey;
    }
    if (other.publicKey_ != null) {
      if (publicKey_ == null) {
        publicKey_ = new global::PBPublicKey();
      }
      PublicKey.MergeFrom(other.PublicKey);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PrivateKey = input.ReadBytes();
          break;
        }
        case 18: {
          if (publicKey_ == null) {
            publicKey_ = new global::PBPublicKey();
          }
          input.ReadMessage(publicKey_);
          break;
        }
      }
    }
  }

}

public sealed partial class PBCertificate : pb::IMessage<PBCertificate> {
  private static readonly pb::MessageParser<PBCertificate> _parser = new pb::MessageParser<PBCertificate>(() => new PBCertificate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBCertificate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::KeysFormatReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBCertificate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBCertificate(PBCertificate other) : this() {
    signature_ = other.signature_;
    publicKey_ = other.publicKey_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBCertificate Clone() {
    return new PBCertificate(this);
  }

  /// <summary>Field number for the "signature" field.</summary>
  public const int SignatureFieldNumber = 1;
  private pb::ByteString signature_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Signature {
    get { return signature_; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "public_key" field.</summary>
  public const int PublicKeyFieldNumber = 2;
  private pb::ByteString publicKey_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString PublicKey {
    get { return publicKey_; }
    set {
      publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBCertificate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBCertificate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Signature != other.Signature) return false;
    if (PublicKey != other.PublicKey) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Signature.Length != 0) hash ^= Signature.GetHashCode();
    if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Signature.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Signature);
    }
    if (PublicKey.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(PublicKey);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Signature.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
    }
    if (PublicKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBCertificate other) {
    if (other == null) {
      return;
    }
    if (other.Signature.Length != 0) {
      Signature = other.Signature;
    }
    if (other.PublicKey.Length != 0) {
      PublicKey = other.PublicKey;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Signature = input.ReadBytes();
          break;
        }
        case 18: {
          PublicKey = input.ReadBytes();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
